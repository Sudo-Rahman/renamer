name: Create Release with Bundles

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manually triggering the workflow

env:
  # Environment variables common for all builds
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

jobs:

  #  build-darwin:
  #    name: Build for macOS (Universal)
  #    runs-on: macos-latest
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v4
  #
  #      - name: Cache Rust build
  #        uses: actions/cache@v3
  #        with:
  #          path: |
  #            ~/.cargo
  #            target
  #          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #          restore-keys: |
  #            ${{ runner.os }}-cargo-
  #
  #      - name: Install Rust Stable
  #        uses: dtolnay/rust-toolchain@stable
  #
  #      - name: Install dependencies
  #        run: |
  #          rustup target add x86_64-apple-darwin
  #          rustup target add aarch64-apple-darwin
  #
  #      - uses: pnpm/action-setup@v4
  #        name: Install pnpm
  #        with:
  #          version: 9
  #          run_install: false
  #
  #      - name: Install Node.js
  #        uses: actions/setup-node@v4
  #        with:
  #          node-version: 22
  #          cache: 'pnpm'
  #
  #      - name: Install dependencies
  #        run: pnpm install
  #
  #      - name: Build (Darwin Universal)
  #        run: pnpm tauri build --target universal-apple-darwin
  #        env:
  #          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  #          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
  #
  #      - name: Upload macOS artifact
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: macOS-app
  #          path: |
  #            src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
  #            src-tauri/target/universal-apple-darwin/release/bundle/macos/*.tar.gz*
  #
  #  build-windows:
  #    name: Build for Windows (x86 and ARM)
  #    runs-on: windows-latest
  #    strategy:
  #      matrix:
  #        arch: [ x86_64-pc-windows-msvc, aarch64-pc-windows-msvc ]
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v4
  #
  #      - name: Cache Rust build
  #        uses: actions/cache@v3
  #        with:
  #          path: |
  #            ~/.cargo
  #            target
  #          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #          restore-keys: |
  #            ${{ runner.os }}-cargo-
  #
  #      - name: Install Rust Stable
  #        uses: dtolnay/rust-toolchain@stable
  #
  #      - name: Install dependencies
  #        run: |
  #          rustup target add ${{ matrix.arch }}
  #
  #      - uses: pnpm/action-setup@v4
  #        name: Install pnpm
  #        with:
  #          version: 9
  #          run_install: false
  #
  #      - name: Install Node.js
  #        uses: actions/setup-node@v4
  #        with:
  #          node-version: 22
  #          cache: 'pnpm'
  #
  #      - name: Install dependencies
  #        run: pnpm install
  #
  #      - name: Build for Windows ${{ matrix.arch }}
  #        run: pnpm tauri build --target ${{ matrix.arch }}
  #        env:
  #          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  #          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
  #
  #      - name: Upload Windows artifact
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: windows-app-${{ matrix.arch }}
  #          path: |
  #            src-tauri/target/${{ matrix.arch }}/release/bundle/msi/*.msi*
  #            src-tauri/target/${{ matrix.arch }}/release/bundle/nsis/*.exe*
  
  
  
  build-linux:
    name: Build for Linux (x86 and ARM)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Rust build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (x86 and ARM)
        run: |
          rustup target add ${{ matrix.arch }}
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libglib2.0-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
          sudo apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install dependencies for aarch64
        if: matrix.arch == 'aarch64-unknown-linux-gnu'
        run: |
          sudo dpkg --add-architecture arm64
          sudo tee /etc/apt/sources.list <<EOF
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy universe
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates universe
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security universe
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security multiverse
          EOF
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install -y gcc-aarch64-linux-gnu
          sudo apt-get install -y libgtk-3-dev:arm64 libwebkit2gtk-4.0-dev:arm64 \
                                  libappindicator3-dev:arm64 librsvg2-dev:arm64
          export PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build for Linux ${{ matrix.arch }}
        run: pnpm tauri build --target ${{ matrix.arch }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-app-${{ matrix.arch }}
          path: src-tauri/target/${{ matrix.arch }}/release/bundle/deb/*.deb*