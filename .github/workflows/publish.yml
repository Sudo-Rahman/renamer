name: Create Release with Bundles

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manually triggering the workflow

env:
  # Environment variables common for all builds
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

jobs:

  #  build-darwin:
  #    name: Build for macOS (Universal)
  #    runs-on: macos-latest
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v4
  #
  #      - name: Cache Rust build
  #        uses: actions/cache@v3
  #        with:
  #          path: |
  #            ~/.cargo
  #            target
  #          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #          restore-keys: |
  #            ${{ runner.os }}-cargo-
  #
  #      - name: Install Rust Stable
  #        uses: dtolnay/rust-toolchain@stable
  #
  #      - name: Install dependencies
  #        run: |
  #          rustup target add x86_64-apple-darwin
  #          rustup target add aarch64-apple-darwin
  #
  #      - uses: pnpm/action-setup@v4
  #        name: Install pnpm
  #        with:
  #          version: 9
  #          run_install: false
  #
  #      - name: Install Node.js
  #        uses: actions/setup-node@v4
  #        with:
  #          node-version: 22
  #          cache: 'pnpm'
  #
  #      - name: Install dependencies
  #        run: pnpm install
  #
  #      - name: Build (Darwin Universal)
  #        run: pnpm tauri build --target universal-apple-darwin
  #        env:
  #          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  #          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
  #
  #      - name: Upload macOS artifact
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: macOS-app
  #          path: |
  #            src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
  #            src-tauri/target/universal-apple-darwin/release/bundle/macos/*.tar.gz*
  #
  #  build-windows:
  #    name: Build for Windows (x86 and ARM)
  #    runs-on: windows-latest
  #    strategy:
  #      matrix:
  #        arch: [ x86_64-pc-windows-msvc, aarch64-pc-windows-msvc ]
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v4
  #
  #      - name: Cache Rust build
  #        uses: actions/cache@v3
  #        with:
  #          path: |
  #            ~/.cargo
  #            target
  #          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #          restore-keys: |
  #            ${{ runner.os }}-cargo-
  #
  #      - name: Install Rust Stable
  #        uses: dtolnay/rust-toolchain@stable
  #
  #      - name: Install dependencies
  #        run: |
  #          rustup target add ${{ matrix.arch }}
  #
  #      - uses: pnpm/action-setup@v4
  #        name: Install pnpm
  #        with:
  #          version: 9
  #          run_install: false
  #
  #      - name: Install Node.js
  #        uses: actions/setup-node@v4
  #        with:
  #          node-version: 22
  #          cache: 'pnpm'
  #
  #      - name: Install dependencies
  #        run: pnpm install
  #
  #      - name: Build for Windows ${{ matrix.arch }}
  #        run: pnpm tauri build --target ${{ matrix.arch }}
  #        env:
  #          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  #          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
  #
  #      - name: Upload Windows artifact
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: windows-app-${{ matrix.arch }}
  #          path: |
  #            src-tauri/target/${{ matrix.arch }}/release/bundle/msi/*.msi*
  #            src-tauri/target/${{ matrix.arch }}/release/bundle/nsis/*.exe*
  
  
  
  build-for-linux:
    strategy:
      fail-fast: false
      matrix:
        platform: [ ubuntu-latest ]
        target:
          [
            x86_64-unknown-linux-gnu,
            aarch64-unknown-linux-gnu,
          ]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            toolchain: stable-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            toolchain: stable-aarch64-unknown-linux-gnu
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build for Linux
        uses: ./actions/build-for-linux
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.toolchain }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_${{ matrix.target }}_deb
          path: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
          if-no-files-found: error
      - name: Upload Artifacts
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        uses: actions/upload-artifact@v4
        with:
          name: linux_${{ matrix.target }}_appimage
          path: src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage*
          if-no-files-found: error


  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [
      #      build-darwin,
      #      build-windows,
      build-for-linux
    ]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/**/*  # Upload all artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}